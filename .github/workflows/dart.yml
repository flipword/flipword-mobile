name: Dart CI

on:
  push:
  pull_request:
    branches:
      - "master"

jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Clone Flutter repository with master channel
#        uses: subosito/flutter-action@v1.5.0
#        with:
#          channel: master
#
#      - name: Flutter doctor
#        run: flutter doctor -v
#
#      - name: Checkout gallery code
#        uses: actions/checkout@v2
#
#      - name: Pub get
#        run: flutter pub get
#
#      - name: Analyse code
#        run: dartanalyzer lib
#
#  build-android:
#    runs-on: ubuntu-latest
#    needs: [ lint ]
#    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
#    steps:
#      - name: Checkout gallery code
#        uses: actions/checkout@v2
#
#      - name: Install java
#        uses: actions/setup-java@v1
#        with:
#          java-version: '12.x'
#
#      - name: Clone Flutter repository
#        uses: subosito/flutter-action@v1
#        with:
#          flutter-version: '2.x'
#
#      - name: Pub get
#        run: flutter pub get
#
#      - name: Decode secrets properties files
#        run: touch .env; echo "AZURE_TRANSLATE_KEY=$AZURE_TRANSLATE_KEY" > .env; echo "$SECRETS_PROPERTIES" | base64 -d > ./android/key.properties;echo "$SECRETS_KEY" | base64 -d > ./android/upload-keystore.jks;echo "$GOOGLE_SERVICE" | base64 -d > ./android/app/google-services.json
#        env:
#          SECRETS_PROPERTIES: ${{ secrets.SECRETS_PROPERTIES }}
#          SECRETS_KEY: ${{ secrets.SECRETS_KEY }}
#          GOOGLE_SERVICE: ${{ secrets.GOOGLE_SERVICE }}
#
#      - name: Build appBundle
#        run: flutter build appbundle
#
#      - name: Upload appBundle
#        uses: actions/upload-artifact@v2
#        with:
#          name: appBundle
#          path: build/app/outputs/bundle/release/app-release.aab

  build-ios:
    runs-on: macos-latest
#    needs: [ lint ]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout gallery code
        uses: actions/checkout@v2

      - name: Install python and codemagic tools
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install python dependencies
        run: python -m pip install codemagic-cli-tools

      - name: Decode appstoreconnectkey
        run: mkdir -p ~/private_keys;echo "$APP_STORE_CONNECT_P8" | base64 -d > ~/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY.p8
        env:
          APP_STORE_CONNECT_P8: ${{ secrets.APP_STORE_CONNECT_P8 }}

      - name: Publish IPA on appstoreconnect
        run: app-store-connect publish --path tmp/*.ipa --issuer-id @env:IOS_ISSUER_ID --key-id @env:APP_STORE_CONNECT_API_KEY --verbose
        env:
          IOS_ISSUER_ID: ${{ secrets.IOS_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      - if: failure()
        run: cat /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/codemagic-19-09-21.log;

      - name: Create Folder for certificates and profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p ~/Library/MobileDevice/Certificates/
      - name: Decode secrets properties files
        run: touch .env;echo "AZURE_TRANSLATE_KEY=$AZURE_TRANSLATE_KEY" > .env;echo "$IOS_GOOGLE_SERVICE" | base64 -d > ./ios/Runner/GoogleService-Info.plist;echo "$P12_CER_BASE64" | base64 -d > ~/Library/MobileDevice/Certificates/certificate.p12;echo "$MOBILEPROVISION_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
        env:
          AZURE_TRANSLATE_KEY: ${{ secrets.AZURE_TRANSLATE_KEY }}
          IOS_GOOGLE_SERVICE: ${{ secrets.IOS_GOOGLE_SERVICE }}
          P12_CER_BASE64: ${{ secrets.P12_CER_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}

      - name: Install python and codemagic tools
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install python dependencies
        run: python -m pip install codemagic-cli-tools

      - name: Initialize Keychain with certificate
        run: |
          keychain initialize
          keychain add-certificates --certificate ~/Library/MobileDevice/Certificates/certificate.p12 --certificate-password @env:P12_KEY_BASE64
        env:
          P12_KEY_BASE64: ${{ secrets.P12_KEY_BASE64 }}

      - name: Clone Flutter repository with master channel
        uses: subosito/flutter-action@v1.5.0
        with:
          channel: master

      - name: Pub get
        run: flutter pub get

      - name: Building IPA
        run: |
          xcode-project use-profiles
          flutter build ios --release --no-codesign --verbose
          xcode-project build-ipa --workspace ios/Runner.xcworkspace --scheme Runner --config Release --verbose

      - name: Decode appstoreconnectkey
        run: echo "$APP_STORE_CONNECT_P8" | base64 -d > ./ios/AuthKey.p8

      - name: Publish IPA on appstoreconnect
        run: app-store-connect publish --path build/ios/ipa/*.ipa --issuer-id @env:IOS_ISSUER_ID --private-key "@file:ios/AuthKey.p8" --key-id @env:APP_STORE_CONNECT_API_KEY
        env:
          IOS_ISSUER_ID: ${{ secrets.IOS_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: adhoc-ipa
          path: build/ios/ipa/*.ipa